#! /usr/local/bin/python3
import subprocess
import argparse

def updateEveryting(args):
    if not (args.python or args.brew or args.conda or args.vim or args.vim or args.explicit):
        subprocess.run( 'brew update && brew upgrade && brew cleanup --prune=14', shell=True )
        subprocess.run( "pip3 freeze --all | sed 's/==.*//g' | pip3 install -U -r /dev/stdin -c ~/.pip_frozen.req", shell=True )
        subprocess.run( 'conda upgrade -y --all', shell=True )
        subprocess.run( 'vim +PackUpdateClose', shell=True )
        subprocess.run( 'env ZSH=$ZSH sh $ZSH/tools/upgrade.sh', shell=True )
    if args.brew:
        subprocess.run( 'brew update && brew upgrade && brew cleanup --prune=14', shell=True )
    if args.python:
        #a fire and forget method to update everything you have installed through pip
        subprocess.run( r"pip3 freeze --all | sed 's/==.*//g' | pip3 install -U -r /dev/stdin -c ~/.pip_frozen.req", shell=True )
    if args.conda:
        subprocess.run( 'conda upgrade -y --all', shell=True )
    if args.vim:
        subprocess.run( 'vim +PackUpdateClose', shell=True )
    if args.zsh:
        subprocess.run( 'env ZSH=$ZSH sh $ZSH/tools/upgrade.sh', shell=True )
    if args.gem:
        subprocess.run( 'gem update', shell=True )
    if args.ycm:
        subprocess.run( 'python3 ~/.vim/pack/minpac/start/YouCompleteMe/install.py', shell=True )
    if args.clean:
        subprocess.run( 'brew cleanup; gem cleanup; conda clean --all -y; vim +PackCleanClose', shell=True)
    if args.backup:
        subprocess.run( r"brew ls | sed 's/ /\r/g' > ~/.packages/brew.req", shell=True)
        subprocess.run( r"brew cask ls | sed 's/ /\r/g' > ~/.packages/brew.req", shell=True)
        subprocess.run( r"pip3 freeze > ~/.packages/python.req", shell=True)
        subprocess.run( "gem list > ~/.packages/gems.req", shell=True)
        subprocess.run( "bup index /Users/admin --exclude-from='/Users/admin/.bup_ignore' && bup save -n dotfiles /Users/admin", shell=True)

parser = argparse.ArgumentParser(description = 'Updates system package managers. With no arguments pip3, conda, vim plugins, oh_my_zsh and homebrew will be updated. Called with arguments only the given package managers will be updated. With the exception of gem. Running with no flags is equivalent to update-everything -pcvbz.')
parser.add_argument('--python', '-p', action='store_true', help = 'Update all pip3 packages.')
parser.add_argument('--conda', '-c', action='store_true', help = 'Update all conda packages, no confirmation.')
parser.add_argument('--vim', '-v', action='store_true', help = 'Update all vundle plugins.')
parser.add_argument('--brew', '-b', action='store_true', help = 'Update all homebrew packages.')
parser.add_argument('--zsh', '-z', action='store_true', help = 'Update Oh My ZSH.')
parser.add_argument('--gem', '-g', action='store_true', help = 'Update ruby gems.')
parser.add_argument('--ycm', '-y', action='store_true', help = 'Recompile the YouCompleteMe vim plugin.')
parser.add_argument('--explicit', '-e', action='store_true', help = 'Only update package managers passed explicitly by flag.')
parser.add_argument('--clean', action='store_true', help= 'Cleanup caches, unused or intermediate files. Used in the obvious way in brew and gem commands.')
parser.add_argument('--backup', action='store_true', help= 'Backup dotfiles to ~/Dropbox/Documents/backups/dotfiles. This also saves the installed python, brew, and gem packages into requirements files in .packages')


args = parser.parse_args()

updateEveryting(args)
